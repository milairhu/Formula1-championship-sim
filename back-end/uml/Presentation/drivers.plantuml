@startuml IA04 - Modélisation Championnat de Formule 1


title Projet IA04 - Modélisation des agents pilotes de Formule 1

class Driver {
  - id : string
  - firstName : string
  - lastName : string
  - level: int
  - country : string
  - championshipPoints: int

  + Driver(id,  firstName, lastName, country : string, level: int, team : *Team, personality: Personality)
  
  }

class DriverInRace {
  - nbLaps : int
  - status : DriverStatus

  - isPitStop : bool
  - timeWoPitStop : int
  - chanEnv : chan Action
  - pitStopSteps : int

  - prevTyre : Tyre
  - currentTyre : Tyre
  - availableTyres : map[Tyre]int
  - tyreTypeCount : int
  - usedTyreTypes : []Tyre

  - currentRank : int
  - speed : int

  + DriverInRace(driver : *Driver, position: *Portion, channel : chan Action, meteoCondition Meteo)
  + PortionSuccess(pénalité: int) : bool
  + PitStop() : bool
  + ChangeTyreType() : bool
  + TestPneus() : bool
  + Overtake(otherDriver : *DriverInRace) : bool, []*DriverInRace
  + DriverToOvertake() : *DriverInRace
  + OvertakeDecision(driverToOvertake : *DriverInRace) : bool
  + ChangeSpeed() : void
  + Start((position : *Portion, nbLaps : int)
  }

enum Action{
  TRY_OVERTAKE
  CONTINUE
  ACCIDENTPNEUS
  NOOP
}

enum DriverStatus{
  RACING
	CRASHED
	ARRIVED
	PITSTOP
	PITSTOP_CHANGETYRE
}

enum Tyre{
  WET
	SOFT
	MEDIUM
	HARD
}
  
class Team {
  - id: string
  - name: string
  - level: int

  + Team(id, name : string, drivers : []Driver, level: int)
  + CalcChampionshipPoints() : int
}


class Personality{
  - TraitsValue : map[string]int

  + Personality(traitsValue : map[string]int)
}

Championship "*" o-- "1..n" Team : prend par à <
Team "1" *-- "2" Driver : appartient à <
Personality "1" --o "1" Driver : a <
DriverInRace "1" o-- "1" Driver : implémente en course >
DriverInRace "1" o-- "*" DriverStatus : a >
DriverInRace "1" o-- "*" Tyre : a/a eu >
DriverInRace "1" o-- "*" Action : souhaite exécuter / exécute >
Portion "1" -- "*" DriverInRace : est sur <


@enduml
